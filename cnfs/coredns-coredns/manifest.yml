apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"run":"coredns-coredns"},"name":"coredns-coredns","namespace":"default"},"spec":{"replicas":3,"selector":{"matchLabels":{"run":"coredns-coredns"}},"template":{"metadata":{"labels":{"run":"coredns-coredns"}},"spec":{"containers":[{"image":"nginx:alpine","name":"coredns-coredns","ports":[{"containerPort":80}],"resources":{"limits":{"ephemeral-storage":"4Gi"},"requests":{"ephemeral-storage":"2Gi"}}}]}}}}
    litmuschaos.io/chaos: "true"
  creationTimestamp: "2020-11-25T13:47:39Z"
  generation: 3
  labels:
    run: coredns-coredns
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:labels:
          .: {}
          f:run: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:run: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:run: {}
          f:spec:
            f:containers:
              k:{"name":"coredns-coredns"}:
                .: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":80,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:protocol: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:ephemeral-storage: {}
                  f:requests:
                    .: {}
                    f:ephemeral-storage: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: kubectl-client-side-apply
    operation: Update
    time: "2020-11-25T13:47:39Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:litmuschaos.io/chaos: {}
    manager: kubectl-annotate
    operation: Update
    time: "2020-11-25T14:20:21Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2020-11-25T14:42:41Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:replicas: {}
    manager: kubectl-edit
    operation: Update
    time: "2020-11-25T14:42:41Z"
  name: coredns-coredns
  namespace: default
  resourceVersion: "29678"
  selfLink: /apis/apps/v1/namespaces/default/deployments/coredns-coredns
  uid: 4f8a6069-5d09-42c8-bebc-aa91dc56165d
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: coredns-coredns
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: coredns-coredns
    spec:
      containers:
      - image: nginx:alpine
        imagePullPolicy: IfNotPresent
        name: coredns-coredns
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            ephemeral-storage: 4Gi
          requests:
            ephemeral-storage: 2Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2020-11-25T13:47:39Z"
    lastUpdateTime: "2020-11-25T13:47:41Z"
    message: ReplicaSet "coredns-coredns-55bc469ddc" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: "2020-11-25T14:40:37Z"
    lastUpdateTime: "2020-11-25T14:40:37Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 3
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
